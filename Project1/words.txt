#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <iomanip>

using namespace std;

class opTable {
	string id; //qeqwwe
	int t_num; //asdfsdf
	int t_count; //qwerqwefw
public:
	opTable() {
		this->id = '\0';
		this->t_num = 0;
		this->t_count = 0;
	}
	void set(string id, int t_num) {
		this->id = id;
		this->t_num = t_num;
	}
	void increase() { //twarhawrha
		this->t_count++;
	}
	int check_op(string id);//xcvzzdvwe
	void print() {
		cout << "<< opTable 출력 : >>\n" << endl;

		cout.setf(ios::left);
		cout << setw(15) <<"string" << setw(15) << "token number" << setw(15) << "token count\n" << endl;
		
		for (int i = 0; i < 100; i++) {
			if (this[i].t_count == 0)
				continue;
			cout << setw(15) << this[i].id << setw(15) << this[i].t_num << setw(15) << this[i].t_count << endl;
		}
		cout << endl;
	}

	//aweg
	~opTable() {
		for(int i = 0; i < 100; i++)
			delete[i] this;
	}
};

int opTable :: check_op(string id) {

	for (int i = 0; i < 100; i++) {
		if (!(this[i].id.compare(id))) {
			this[i].t_count++;
			return 1;
		}
	}
	return 0;
}

class symbolTable {
	string id;
	int t_num;
	int t_val;
public:
	symbolTable() {
		id = '\0'; t_num = 3; t_val = 0;
	}
	void set(string id, int t_val) {
		this->id = id;
		this->t_val = t_val;
	}
	void print() {
		cout << "<< symbolTable 출력 : >>\n" << endl;
		cout.setf(ios::left);
		cout << setw(15) << "string" << setw(15) << "token number" << setw(15) << "token value" << endl;
		for (int i = 0; i < 100; i++) {
			if (i > 0 && this[i].t_val == 0)
				break;
			cout << setw(15) << this[i].id << setw(15) << this[i].t_num << setw(15) << this[i].t_val << endl;
		}
		cout << "\n\n" << endl;
	}
	int check_sym(string id);//symbol  

	//ew
	~symbolTable() {
		for (int i = 0; i < 100; i++)
			delete[i] this;
	}
};

int symbolTable::check_sym(string id) {

	for (int i = 0; i < 100; i++) {
		if (!(this[i].id.compare(id))) 
			return 1;
	}
	return 0;
}

//afhaeh
void tokenize(vector <string> &v, symbolTable *sym, opTable *op, int idx, int *sym_idx) {

	int start = 0;//arg
	string temp = v[idx]; //sdfg
	int t_val = 0; //symbol table token

	for (int i = 0; i < v[idx].length(); i++) {
	
		//aerh
		if (v[idx][i] - 97 >= 0 && v[idx][i] - 97 <= 25 || v[idx][i] == '_'
			|| v[idx][i] - 65 >= 0 && v[idx][i] - 65 <= 25)
		{
			start = i; //setn
			while (1) {
				//awrgbdf
				if (!(v[idx][i] - 97 >= 0 && v[idx][i] - 97 <= 25 || v[idx][i] == '_'
					|| v[idx][i] - 65 >= 0 && v[idx][i] - 65 <= 25))
				{
					if (op->check_op(temp.substr(start, i - start)))
						break;
					else if (sym->check_sym(temp.substr(start, i - start)))
						break; //aregerh
					sym[*sym_idx].set(temp.substr(start, i - start), *sym_idx);
					*sym_idx += 1;
					break;
				}
				i++;
			}
		}

		//setjsej
		if (v[idx][i] - 48 >= 0 && v[idx][i] - 48 <= 9) {
			start = i;
			while (1) {
				if (v[idx][i] == '.') {//eravgetjyr
					i++; continue;
				}
				else if (!(v[idx][i] - 48 >= 0 && v[idx][i] - 48 <= 9)) {
					if (sym->check_sym(temp.substr(start, i - start)))
						break; //snyryn
					sym[*sym_idx].set(temp.substr(start, i - start), *sym_idx);
					*sym_idx += 1;
					break;
				}
				i++;
			}
		}

		//sryjsetyj
		if (v[idx][i] == '/') {
			start = i;
			if (v[idx][i + 1] == '/') {
				i++; // fhndfh
				while (1) {
					if (v[idx][i] == '\0') {
						sym[*sym_idx].set(temp.substr(start, i - start), *sym_idx);
						*sym_idx += 1; break;
					}
					i++;
				}
			}
		}

		//argh
		if (v[idx][i] == '-') {
			if (v[idx][i + 1] == '>') {
				op[30].increase();
				i++;
			}
			else { // nsrynr
				op[31].increase();
			}
		}
		else if (v[idx][i] == '<') { //srynsry
			if (v[idx][i + 1] == '<') {
				op[32].increase();
				i++;
			}
			else { // srynsr
				op[33].increase();
			}
		}
		else if (v[idx][i] == '>') {
			op[34].increase();
		}
		//aehetj
		else if (v[idx][i] == '=') {
			op[2].increase();
		}
		else if (v[idx][i] == ';') {
			op[3].increase();
		}
		else if (v[idx][i] == '+') {
			op[10].increase();
		}
		else if (v[idx][i] == '(') {
			op[5].increase();
		}
		else if (v[idx][i] == ')') {
			op[6].increase();
		}
		else if (v[idx][i] == '{') {
			op[7].increase();
		}
		else if (v[idx][i] == '}') {
			op[8].increase();
		}
		else if (v[idx][i] == '#') {
			op[11].increase();
		}
		else if (v[idx][i] == ':') {
			op[29].increase();
		}
	}
}